"""autogenerated by genpy from tau_under/tau_under_msg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class tau_under_msg(genpy.Message):
  _md5sum = "6be40ba2e8dfc4bfad571b61abbe7647"
  _type = "tau_under/tau_under_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 left_shank_earth
float64 left_thigh_shank
float64 left_hip_thigh
float64 right_shank_earth
float64 right_thigh_shank
float64 right_hip_thigh
float64 tau
bool right_is_stance
"""
  __slots__ = ['left_shank_earth','left_thigh_shank','left_hip_thigh','right_shank_earth','right_thigh_shank','right_hip_thigh','tau','right_is_stance']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_shank_earth,left_thigh_shank,left_hip_thigh,right_shank_earth,right_thigh_shank,right_hip_thigh,tau,right_is_stance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(tau_under_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.left_shank_earth is None:
        self.left_shank_earth = 0.
      if self.left_thigh_shank is None:
        self.left_thigh_shank = 0.
      if self.left_hip_thigh is None:
        self.left_hip_thigh = 0.
      if self.right_shank_earth is None:
        self.right_shank_earth = 0.
      if self.right_thigh_shank is None:
        self.right_thigh_shank = 0.
      if self.right_hip_thigh is None:
        self.right_hip_thigh = 0.
      if self.tau is None:
        self.tau = 0.
      if self.right_is_stance is None:
        self.right_is_stance = False
    else:
      self.left_shank_earth = 0.
      self.left_thigh_shank = 0.
      self.left_hip_thigh = 0.
      self.right_shank_earth = 0.
      self.right_thigh_shank = 0.
      self.right_hip_thigh = 0.
      self.tau = 0.
      self.right_is_stance = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7dB.pack(_x.left_shank_earth, _x.left_thigh_shank, _x.left_hip_thigh, _x.right_shank_earth, _x.right_thigh_shank, _x.right_hip_thigh, _x.tau, _x.right_is_stance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 57
      (_x.left_shank_earth, _x.left_thigh_shank, _x.left_hip_thigh, _x.right_shank_earth, _x.right_thigh_shank, _x.right_hip_thigh, _x.tau, _x.right_is_stance,) = _struct_7dB.unpack(str[start:end])
      self.right_is_stance = bool(self.right_is_stance)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7dB.pack(_x.left_shank_earth, _x.left_thigh_shank, _x.left_hip_thigh, _x.right_shank_earth, _x.right_thigh_shank, _x.right_hip_thigh, _x.tau, _x.right_is_stance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 57
      (_x.left_shank_earth, _x.left_thigh_shank, _x.left_hip_thigh, _x.right_shank_earth, _x.right_thigh_shank, _x.right_hip_thigh, _x.tau, _x.right_is_stance,) = _struct_7dB.unpack(str[start:end])
      self.right_is_stance = bool(self.right_is_stance)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7dB = struct.Struct("<7dB")
