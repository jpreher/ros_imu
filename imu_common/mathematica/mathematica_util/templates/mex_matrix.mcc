#include "math2mat.hpp"

/*
 * Template for compiling matrices which are functions of state.
 * nr - number of rows
 * nc - number of columns
 */

void docalc(double *matrix, double *x, double *p)
{
  VectorXd foo(<* AmberCpp`Private`nRows * AmberCpp`Private`nCols *>);
  foo << <* AmberCpp`Private`matrixCform *>;
  std::memcpy(matrix, foo.data(), <* AmberCpp`Private`nRows * AmberCpp`Private`nCols *> * sizeof(double));
}

void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  double *matrix, *x, *p;
  size_t mrows, ncols;
  
  /* Check for proper number of arguments. */
  if(nrhs!=2) {
    mexErrMsgIdAndTxt( "MATLAB:MShaped:invalidNumInputs",
		       "Two inputs required (x, p).");
  } else if(nlhs>1) {
    mexErrMsgIdAndTxt( "MATLAB:MShaped:maxlhs",
		       "Too many output arguments.");
  }
  
  /* The input must be a noncomplex scalar double.*/
  int i = 0;
  mrows = mxGetM(prhs[i]);
  ncols = mxGetN(prhs[i]);
  if( !mxIsDouble(prhs[i]) || mxIsComplex(prhs[i]) ||
      (!(mrows==<* AmberCpp`Private`nx *> && ncols==1) &&
       !(mrows==1 && ncols==<* 2*AmberCpp`Private`ne *>)) ) {
    mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector",
		       "x is wrong.");
  }

  mrows = mxGetM(prhs[++i]);
  ncols = mxGetN(prhs[i]);
  if( !mxIsDouble(prhs[i]) || mxIsComplex(prhs[i]) ||
      (!(mrows==<* AmberCpp`Private`np *> && ncols==1) &&
       !(mrows==1 && ncols==<* AmberCpp`Private`np *>) ) ) {
    mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector",
		       "p is wrong.");
  }
  
  /* Create matrix for the return argument. */
  plhs[0] = mxCreateDoubleMatrix((mwSize) <* AmberCpp`Private`nRows *>, (mwSize) <* AmberCpp`Private`nCols *>, mxREAL);
  matrix = mxGetPr(plhs[0]);

  /* Assign pointers to each input and output. */
  x = mxGetPr(prhs[0]);
  p = mxGetPr(prhs[1]);
  
  /* Call the calculation subroutine. */
  docalc(matrix, x, p);
}
